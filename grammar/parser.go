// Code generated by goyacc -o parser.go staticlang.y. DO NOT EDIT.

// Package grammar contains the Yacc parser for StaticLang
//
//line staticlang.y:2
package grammar

import __yyfmt__ "fmt"

//line staticlang.y:3

import (
	"fmt"
	"strconv"

	"github.com/sokoide/llvm5/internal/domain"
	"github.com/sokoide/llvm5/internal/interfaces"
)

//line staticlang.y:15
type yySymType struct {
	yys     int
	token   interfaces.Token
	program *domain.Program
	decl    domain.Declaration
	decls   []domain.Declaration
	stmt    domain.Statement
	stmts   []domain.Statement
	expr    domain.Expression
	exprs   []domain.Expression
	param   domain.Parameter
	params  []domain.Parameter
	field   domain.StructField
	fields  []domain.StructField
	typ     domain.Type
	str     string
	num     int64
	float   float64
	boolean bool
}

const INT = 57346
const FLOAT = 57347
const STRING = 57348
const BOOL = 57349
const IDENTIFIER = 57350
const FUNC = 57351
const STRUCT = 57352
const VAR = 57353
const IF = 57354
const ELSE = 57355
const WHILE = 57356
const FOR = 57357
const RETURN = 57358
const TRUE = 57359
const FALSE = 57360
const PLUS = 57361
const MINUS = 57362
const STAR = 57363
const SLASH = 57364
const PERCENT = 57365
const EQUAL = 57366
const NOT_EQUAL = 57367
const LESS = 57368
const LESS_EQUAL = 57369
const GREATER = 57370
const GREATER_EQUAL = 57371
const AND = 57372
const OR = 57373
const NOT = 57374
const ASSIGN = 57375
const LEFT_PAREN = 57376
const RIGHT_PAREN = 57377
const LEFT_BRACE = 57378
const RIGHT_BRACE = 57379
const LEFT_BRACKET = 57380
const RIGHT_BRACKET = 57381
const SEMICOLON = 57382
const COMMA = 57383
const DOT = 57384
const COLON = 57385
const ARROW = 57386
const EOF = 57387
const LOWER_THAN_ELSE = 57388
const UNARY_MINUS = 57389

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"INT",
	"FLOAT",
	"STRING",
	"BOOL",
	"IDENTIFIER",
	"FUNC",
	"STRUCT",
	"VAR",
	"IF",
	"ELSE",
	"WHILE",
	"FOR",
	"RETURN",
	"TRUE",
	"FALSE",
	"PLUS",
	"MINUS",
	"STAR",
	"SLASH",
	"PERCENT",
	"EQUAL",
	"NOT_EQUAL",
	"LESS",
	"LESS_EQUAL",
	"GREATER",
	"GREATER_EQUAL",
	"AND",
	"OR",
	"NOT",
	"ASSIGN",
	"LEFT_PAREN",
	"RIGHT_PAREN",
	"LEFT_BRACE",
	"RIGHT_BRACE",
	"LEFT_BRACKET",
	"RIGHT_BRACKET",
	"SEMICOLON",
	"COMMA",
	"DOT",
	"COLON",
	"ARROW",
	"EOF",
	"LOWER_THAN_ELSE",
	"UNARY_MINUS",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line staticlang.y:585

// Helper functions
func getLocationFromToken(token interfaces.Token) domain.SourceRange {
	pos := token.Location
	return domain.SourceRange{
		Start: pos,
		End:   pos,
	}
}

func getLocationFromString(str string) domain.SourceRange {
	// This is a placeholder - in a real implementation, we'd track positions
	return domain.SourceRange{
		Start: domain.SourcePosition{},
		End:   domain.SourcePosition{},
	}
}

func getLocation(decls []domain.Declaration) domain.SourceRange {
	if len(decls) == 0 {
		return domain.SourceRange{}
	}
	start := decls[0].GetLocation()
	end := decls[len(decls)-1].GetLocation()
	return domain.SourceRange{
		Start: start.Start,
		End:   end.End,
	}
}

//line yacctab:1
var yyExca = [...]int8{
	-1, 1,
	1, -1,
	-2, 0,
}

const yyPrivate = 57344

const yyLast = 377

var yyAct = [...]uint8{
	108, 29, 116, 73, 160, 159, 126, 74, 118, 128,
	51, 75, 127, 10, 42, 11, 52, 11, 158, 23,
	24, 150, 149, 15, 16, 17, 22, 147, 13, 148,
	132, 86, 35, 26, 11, 30, 34, 133, 37, 50,
	11, 13, 53, 11, 55, 11, 34, 36, 58, 11,
	59, 18, 79, 25, 83, 80, 84, 78, 12, 43,
	44, 45, 21, 13, 82, 81, 11, 30, 85, 11,
	13, 12, 46, 47, 13, 39, 13, 54, 76, 77,
	166, 165, 102, 103, 123, 152, 19, 40, 125, 48,
	104, 13, 8, 9, 151, 137, 124, 11, 13, 105,
	12, 33, 49, 56, 136, 32, 135, 129, 87, 88,
	89, 90, 91, 92, 93, 94, 95, 96, 97, 98,
	99, 12, 134, 20, 161, 28, 13, 139, 62, 63,
	64, 138, 131, 57, 31, 3, 140, 145, 14, 27,
	100, 142, 38, 143, 144, 141, 11, 60, 61, 62,
	63, 64, 156, 157, 153, 154, 41, 106, 155, 162,
	163, 115, 164, 114, 113, 112, 167, 168, 43, 44,
	45, 111, 13, 110, 109, 117, 119, 2, 120, 121,
	122, 46, 47, 7, 39, 60, 61, 62, 63, 64,
	65, 66, 67, 68, 69, 70, 40, 6, 48, 5,
	80, 43, 44, 45, 146, 13, 4, 1, 117, 119,
	0, 120, 121, 122, 46, 47, 0, 39, 60, 61,
	62, 63, 64, 0, 0, 67, 68, 69, 70, 40,
	0, 48, 0, 80, 130, 43, 44, 45, 0, 13,
	0, 0, 117, 119, 0, 120, 121, 122, 46, 47,
	0, 39, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 40, 0, 48, 0, 80, 107, 43,
	44, 45, 0, 13, 0, 0, 117, 119, 0, 120,
	121, 122, 46, 47, 0, 39, 0, 0, 0, 43,
	44, 45, 0, 13, 0, 0, 0, 40, 0, 48,
	0, 80, 46, 47, 0, 39, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 40, 0, 48,
	101, 60, 61, 62, 63, 64, 65, 66, 67, 68,
	69, 70, 71, 72, 43, 44, 45, 0, 13, 0,
	0, 0, 0, 0, 0, 0, 0, 46, 47, 0,
	39, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 40, 0, 48, 60, 61, 62, 63, 64,
	65, 66, 67, 68, 69, 70, 71,
}

var yyPact = [...]int16{
	83, -1000, 83, -1000, -1000, -1000, -1000, -1000, 118, 118,
	118, -1000, 47, -1000, -1000, 89, 26, -14, 14, 62,
	90, 68, -1000, 330, 67, 62, -1000, -25, 33, -1000,
	62, 66, -1000, -1000, 62, 10, 302, -1000, -31, 330,
	330, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 330, 19,
	-1000, 20, 118, 19, 62, -1000, -1000, -1000, -9, -1000,
	330, 330, 330, 330, 330, 330, 330, 330, 330, 330,
	330, 330, 330, 285, 330, 118, -1000, -1000, 64, -1000,
	231, 19, 62, -1000, -1000, 19, -1000, 107, 107, -1000,
	-1000, -1000, 199, 199, 128, 128, 128, 128, 166, 346,
	-29, -1000, -1000, -30, -1000, -1000, 197, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 118, -3, 88,
	72, 70, 55, -1000, 19, -1000, -1000, 330, -1000, -1000,
	-1000, 62, 330, -1000, 330, 330, 164, -1000, -13, -1000,
	-1000, -11, -19, 59, 50, 330, 330, -1000, -1000, 330,
	-1000, 265, 265, -22, -35, -36, 111, -1000, 265, 265,
	-1000, 265, 46, 45, -1000, 265, 265, -1000, -1000,
}

var yyPgo = [...]uint8{
	0, 207, 135, 206, 199, 197, 183, 177, 0, 174,
	173, 171, 165, 164, 163, 161, 2, 157, 8, 156,
	142, 38, 47, 140, 1, 139, 101, 134, 13, 14,
}

var yyR1 = [...]int8{
	0, 1, 1, 7, 7, 2, 2, 2, 2, 5,
	5, 6, 3, 3, 3, 3, 4, 4, 25, 25,
	24, 27, 27, 26, 28, 28, 28, 17, 17, 8,
	8, 8, 8, 8, 8, 8, 8, 9, 9, 10,
	11, 11, 12, 13, 13, 14, 14, 15, 16, 16,
	18, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 21, 21, 21, 20, 20,
	20, 20, 20, 23, 23, 19, 19, 19, 19, 19,
	19, 19, 29,
}

var yyR2 = [...]int8{
	0, 1, 0, 1, 2, 1, 1, 1, 1, 3,
	5, 5, 7, 6, 8, 7, 5, 4, 1, 3,
	2, 1, 2, 3, 1, 4, 3, 1, 2, 1,
	1, 1, 1, 1, 1, 1, 1, 4, 6, 4,
	5, 7, 5, 8, 8, 2, 3, 2, 3, 2,
	1, 1, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 1, 2, 2, 1, 4,
	3, 4, 3, 1, 3, 1, 1, 1, 1, 1,
	1, 3, 1,
}

var yyChk = [...]int16{
	-1000, -1, -7, -2, -3, -4, -5, -6, 9, 10,
	-28, -29, 38, 8, -2, -29, -29, -29, 4, 39,
	34, 36, 40, 33, 34, 39, -28, -25, 35, -24,
	-29, -27, 37, -26, -29, -18, -22, -21, -20, 20,
	32, -19, -29, 4, 5, 6, 17, 18, 34, 35,
	-28, 35, 41, -28, 44, -28, 37, -26, -28, 40,
	19, 20, 21, 22, 23, 24, 25, 26, 27, 28,
	29, 30, 31, 34, 38, 42, -21, -21, -18, -16,
	36, -28, 44, -24, -16, -28, 40, -22, -22, -22,
	-22, -22, -22, -22, -22, -22, -22, -22, -22, -22,
	-23, 35, -18, -18, -29, 35, -17, 37, -8, -9,
	-10, -11, -12, -13, -14, -15, -16, 11, -18, 12,
	14, 15, 16, -16, -28, -16, 35, 41, 39, -8,
	37, -29, 33, 40, 34, 34, 34, 40, -18, -16,
	-18, -28, -18, -18, -18, -8, 40, 40, 40, 33,
	40, 35, 35, -18, -18, -18, -8, -8, 40, 40,
	40, 13, -8, -8, -8, 35, 35, -8, -8,
}

var yyDef = [...]int8{
	2, -2, 1, 3, 5, 6, 7, 8, 0, 0,
	0, 24, 0, 82, 4, 0, 0, 0, 0, 0,
	0, 0, 9, 0, 0, 0, 26, 0, 0, 18,
	0, 0, 17, 21, 0, 0, 50, 51, 65, 0,
	0, 68, 75, 76, 77, 78, 79, 80, 0, 0,
	25, 0, 0, 0, 0, 20, 16, 22, 0, 10,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 66, 67, 0, 11,
	0, 0, 0, 19, 13, 0, 23, 52, 53, 54,
	55, 56, 57, 58, 59, 60, 61, 62, 63, 64,
	0, 70, 73, 0, 72, 81, 0, 49, 27, 29,
	30, 31, 32, 33, 34, 35, 36, 0, 0, 0,
	0, 0, 0, 12, 0, 15, 69, 0, 71, 28,
	48, 0, 0, 47, 0, 0, 0, 45, 0, 14,
	74, 0, 0, 0, 0, 0, 0, 46, 37, 0,
	39, 0, 0, 0, 0, 0, 40, 42, 0, 0,
	38, 0, 0, 0, 41, 0, 0, 43, 44,
}

var yyTok1 = [...]int8{
	1,
}

var yyTok2 = [...]int8{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47,
}

var yyTok3 = [...]int8{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := int(yyPact[state])
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && int(yyChk[int(yyAct[n])]) == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || int(yyExca[i+1]) != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := int(yyExca[i])
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = int(yyTok1[0])
		goto out
	}
	if char < len(yyTok1) {
		token = int(yyTok1[char])
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = int(yyTok2[char-yyPrivate])
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = int(yyTok3[i+0])
		if token == char {
			token = int(yyTok3[i+1])
			goto out
		}
	}

out:
	if token == 0 {
		token = int(yyTok2[1]) /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = int(yyPact[yystate])
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = int(yyAct[yyn])
	if int(yyChk[yyn]) == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = int(yyDef[yystate])
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && int(yyExca[xi+1]) == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = int(yyExca[xi+0])
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = int(yyExca[xi+1])
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = int(yyPact[yyS[yyp].yys]) + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = int(yyAct[yyn]) /* simulate a shift of "error" */
					if int(yyChk[yystate]) == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= int(yyR2[yyn])
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = int(yyR1[yyn])
	yyg := int(yyPgo[yyn])
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = int(yyAct[yyg])
	} else {
		yystate = int(yyAct[yyj])
		if int(yyChk[yystate]) != -yyn {
			yystate = int(yyAct[yyg])
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-1 : yypt+1]
//line staticlang.y:78
		{
			yyVAL.program = &domain.Program{
				BaseNode:     domain.BaseNode{Location: getLocation(yyDollar[1].decls)},
				Declarations: yyDollar[1].decls,
			}
			yylex.(*Parser).result = yyVAL.program
		}
	case 2:
		yyDollar = yyS[yypt-0 : yypt+1]
//line staticlang.y:85
		{
			yyVAL.program = &domain.Program{
				BaseNode:     domain.BaseNode{},
				Declarations: []domain.Declaration{},
			}
			yylex.(*Parser).result = yyVAL.program
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
//line staticlang.y:94
		{
			yyVAL.decls = []domain.Declaration{yyDollar[1].decl}
		}
	case 4:
		yyDollar = yyS[yypt-2 : yypt+1]
//line staticlang.y:97
		{
			yyVAL.decls = append(yyDollar[1].decls, yyDollar[2].decl)
		}
	case 5:
		yyDollar = yyS[yypt-1 : yypt+1]
//line staticlang.y:102
		{
			yyVAL.decl = yyDollar[1].decl
		}
	case 6:
		yyDollar = yyS[yypt-1 : yypt+1]
//line staticlang.y:103
		{
			yyVAL.decl = yyDollar[1].decl
		}
	case 7:
		yyDollar = yyS[yypt-1 : yypt+1]
//line staticlang.y:104
		{
			yyVAL.decl = yyDollar[1].decl
		}
	case 8:
		yyDollar = yyS[yypt-1 : yypt+1]
//line staticlang.y:105
		{
			yyVAL.decl = yyDollar[1].decl
		}
	case 9:
		yyDollar = yyS[yypt-3 : yypt+1]
//line staticlang.y:108
		{
			yyVAL.decl = &domain.VarDeclStmt{
				BaseNode:    domain.BaseNode{Location: getLocationFromString(yyDollar[2].str)},
				Name:        yyDollar[2].str,
				Type_:       yyDollar[1].typ,
				Initializer: nil,
			}
		}
	case 10:
		yyDollar = yyS[yypt-5 : yypt+1]
//line staticlang.y:116
		{
			yyVAL.decl = &domain.VarDeclStmt{
				BaseNode:    domain.BaseNode{Location: getLocationFromString(yyDollar[2].str)},
				Name:        yyDollar[2].str,
				Type_:       yyDollar[1].typ,
				Initializer: yyDollar[4].expr,
			}
		}
	case 11:
		yyDollar = yyS[yypt-5 : yypt+1]
//line staticlang.y:126
		{
			yyVAL.decl = &domain.FunctionDecl{
				BaseNode:   domain.BaseNode{Location: getLocationFromString(yyDollar[2].str)},
				Name:       yyDollar[2].str,
				Parameters: []domain.Parameter{},
				ReturnType: yyDollar[1].typ,
				Body:       yyDollar[5].stmt.(*domain.BlockStmt),
			}
		}
	case 12:
		yyDollar = yyS[yypt-7 : yypt+1]
//line staticlang.y:137
		{
			yyVAL.decl = &domain.FunctionDecl{
				BaseNode:   domain.BaseNode{Location: getLocationFromToken(yyDollar[1].token)},
				Name:       yyDollar[2].str,
				Parameters: yyDollar[4].params,
				ReturnType: yyDollar[6].typ,
				Body:       yyDollar[7].stmt.(*domain.BlockStmt),
			}
		}
	case 13:
		yyDollar = yyS[yypt-6 : yypt+1]
//line staticlang.y:146
		{
			yyVAL.decl = &domain.FunctionDecl{
				BaseNode:   domain.BaseNode{Location: getLocationFromToken(yyDollar[1].token)},
				Name:       yyDollar[2].str,
				Parameters: []domain.Parameter{},
				ReturnType: yyDollar[5].typ,
				Body:       yyDollar[6].stmt.(*domain.BlockStmt),
			}
		}
	case 14:
		yyDollar = yyS[yypt-8 : yypt+1]
//line staticlang.y:155
		{
			yyVAL.decl = &domain.FunctionDecl{
				BaseNode:   domain.BaseNode{Location: getLocationFromToken(yyDollar[1].token)},
				Name:       yyDollar[2].str,
				Parameters: yyDollar[4].params,
				ReturnType: yyDollar[7].typ,
				Body:       yyDollar[8].stmt.(*domain.BlockStmt),
			}
		}
	case 15:
		yyDollar = yyS[yypt-7 : yypt+1]
//line staticlang.y:164
		{
			yyVAL.decl = &domain.FunctionDecl{
				BaseNode:   domain.BaseNode{Location: getLocationFromToken(yyDollar[1].token)},
				Name:       yyDollar[2].str,
				Parameters: []domain.Parameter{},
				ReturnType: yyDollar[6].typ,
				Body:       yyDollar[7].stmt.(*domain.BlockStmt),
			}
		}
	case 16:
		yyDollar = yyS[yypt-5 : yypt+1]
//line staticlang.y:175
		{
			yyVAL.decl = &domain.StructDecl{
				BaseNode: domain.BaseNode{Location: getLocationFromToken(yyDollar[1].token)},
				Name:     yyDollar[2].str,
				Fields:   yyDollar[4].fields,
			}
		}
	case 17:
		yyDollar = yyS[yypt-4 : yypt+1]
//line staticlang.y:182
		{
			yyVAL.decl = &domain.StructDecl{
				BaseNode: domain.BaseNode{Location: getLocationFromToken(yyDollar[1].token)},
				Name:     yyDollar[2].str,
				Fields:   []domain.StructField{},
			}
		}
	case 18:
		yyDollar = yyS[yypt-1 : yypt+1]
//line staticlang.y:191
		{
			yyVAL.params = []domain.Parameter{yyDollar[1].param}
		}
	case 19:
		yyDollar = yyS[yypt-3 : yypt+1]
//line staticlang.y:194
		{
			yyVAL.params = append(yyDollar[1].params, yyDollar[3].param)
		}
	case 20:
		yyDollar = yyS[yypt-2 : yypt+1]
//line staticlang.y:199
		{
			yyVAL.param = domain.Parameter{
				Name: yyDollar[1].str,
				Type: yyDollar[2].typ,
			}
		}
	case 21:
		yyDollar = yyS[yypt-1 : yypt+1]
//line staticlang.y:207
		{
			yyVAL.fields = []domain.StructField{yyDollar[1].field}
		}
	case 22:
		yyDollar = yyS[yypt-2 : yypt+1]
//line staticlang.y:210
		{
			yyVAL.fields = append(yyDollar[1].fields, yyDollar[2].field)
		}
	case 23:
		yyDollar = yyS[yypt-3 : yypt+1]
//line staticlang.y:215
		{
			yyVAL.field = domain.StructField{
				Name: yyDollar[1].str,
				Type: yyDollar[2].typ,
			}
		}
	case 24:
		yyDollar = yyS[yypt-1 : yypt+1]
//line staticlang.y:223
		{
			reg := yylex.(*Parser).typeRegistry
			if t, exists := reg.GetType(yyDollar[1].str); exists {
				yyVAL.typ = t
			} else {
				yyVAL.typ = &domain.TypeError{Message: fmt.Sprintf("unknown type: %s", yyDollar[1].str)}
			}
		}
	case 25:
		yyDollar = yyS[yypt-4 : yypt+1]
//line staticlang.y:231
		{
			size, _ := strconv.ParseInt(yyDollar[2].token.Value, 10, 32)
			yyVAL.typ = &domain.ArrayType{
				ElementType: yyDollar[4].typ,
				Size:        int(size),
			}
		}
	case 26:
		yyDollar = yyS[yypt-3 : yypt+1]
//line staticlang.y:238
		{
			yyVAL.typ = &domain.ArrayType{
				ElementType: yyDollar[3].typ,
				Size:        -1, // dynamic array
			}
		}
	case 27:
		yyDollar = yyS[yypt-1 : yypt+1]
//line staticlang.y:246
		{
			yyVAL.stmts = []domain.Statement{yyDollar[1].stmt}
		}
	case 28:
		yyDollar = yyS[yypt-2 : yypt+1]
//line staticlang.y:249
		{
			yyVAL.stmts = append(yyDollar[1].stmts, yyDollar[2].stmt)
		}
	case 29:
		yyDollar = yyS[yypt-1 : yypt+1]
//line staticlang.y:254
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 30:
		yyDollar = yyS[yypt-1 : yypt+1]
//line staticlang.y:255
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 31:
		yyDollar = yyS[yypt-1 : yypt+1]
//line staticlang.y:256
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 32:
		yyDollar = yyS[yypt-1 : yypt+1]
//line staticlang.y:257
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 33:
		yyDollar = yyS[yypt-1 : yypt+1]
//line staticlang.y:258
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 34:
		yyDollar = yyS[yypt-1 : yypt+1]
//line staticlang.y:259
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 35:
		yyDollar = yyS[yypt-1 : yypt+1]
//line staticlang.y:260
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 36:
		yyDollar = yyS[yypt-1 : yypt+1]
//line staticlang.y:261
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 37:
		yyDollar = yyS[yypt-4 : yypt+1]
//line staticlang.y:264
		{
			yyVAL.stmt = &domain.VarDeclStmt{
				BaseNode:    domain.BaseNode{Location: getLocationFromToken(yyDollar[1].token)},
				Name:        yyDollar[2].str,
				Type_:       yyDollar[3].typ,
				Initializer: nil,
			}
		}
	case 38:
		yyDollar = yyS[yypt-6 : yypt+1]
//line staticlang.y:272
		{
			yyVAL.stmt = &domain.VarDeclStmt{
				BaseNode:    domain.BaseNode{Location: getLocationFromToken(yyDollar[1].token)},
				Name:        yyDollar[2].str,
				Type_:       yyDollar[3].typ,
				Initializer: yyDollar[5].expr,
			}
		}
	case 39:
		yyDollar = yyS[yypt-4 : yypt+1]
//line staticlang.y:282
		{
			yyVAL.stmt = &domain.AssignStmt{
				BaseNode: domain.BaseNode{Location: yyDollar[1].expr.GetLocation()},
				Target:   yyDollar[1].expr,
				Value:    yyDollar[3].expr,
			}
		}
	case 40:
		yyDollar = yyS[yypt-5 : yypt+1]
//line staticlang.y:291
		{
			yyVAL.stmt = &domain.IfStmt{
				BaseNode:  domain.BaseNode{Location: getLocationFromToken(yyDollar[1].token)},
				Condition: yyDollar[3].expr,
				ThenStmt:  yyDollar[5].stmt,
				ElseStmt:  nil,
			}
		}
	case 41:
		yyDollar = yyS[yypt-7 : yypt+1]
//line staticlang.y:299
		{
			yyVAL.stmt = &domain.IfStmt{
				BaseNode:  domain.BaseNode{Location: getLocationFromToken(yyDollar[1].token)},
				Condition: yyDollar[3].expr,
				ThenStmt:  yyDollar[5].stmt,
				ElseStmt:  yyDollar[7].stmt,
			}
		}
	case 42:
		yyDollar = yyS[yypt-5 : yypt+1]
//line staticlang.y:309
		{
			yyVAL.stmt = &domain.WhileStmt{
				BaseNode:  domain.BaseNode{Location: getLocationFromToken(yyDollar[1].token)},
				Condition: yyDollar[3].expr,
				Body:      yyDollar[5].stmt,
			}
		}
	case 43:
		yyDollar = yyS[yypt-8 : yypt+1]
//line staticlang.y:318
		{
			yyVAL.stmt = &domain.ForStmt{
				BaseNode:  domain.BaseNode{Location: getLocationFromToken(yyDollar[1].token)},
				Init:      yyDollar[3].stmt,
				Condition: yyDollar[4].expr,
				Update:    yyDollar[6].stmt,
				Body:      yyDollar[8].stmt,
			}
		}
	case 44:
		yyDollar = yyS[yypt-8 : yypt+1]
//line staticlang.y:327
		{
			yyVAL.stmt = &domain.ForStmt{
				BaseNode:  domain.BaseNode{Location: getLocationFromToken(yyDollar[1].token)},
				Init:      nil,
				Condition: yyDollar[4].expr,
				Update:    yyDollar[6].stmt,
				Body:      yyDollar[8].stmt,
			}
		}
	case 45:
		yyDollar = yyS[yypt-2 : yypt+1]
//line staticlang.y:338
		{
			yyVAL.stmt = &domain.ReturnStmt{
				BaseNode: domain.BaseNode{Location: getLocationFromToken(yyDollar[1].token)},
				Value:    nil,
			}
		}
	case 46:
		yyDollar = yyS[yypt-3 : yypt+1]
//line staticlang.y:344
		{
			yyVAL.stmt = &domain.ReturnStmt{
				BaseNode: domain.BaseNode{Location: getLocationFromToken(yyDollar[1].token)},
				Value:    yyDollar[2].expr,
			}
		}
	case 47:
		yyDollar = yyS[yypt-2 : yypt+1]
//line staticlang.y:352
		{
			yyVAL.stmt = &domain.ExprStmt{
				BaseNode:   domain.BaseNode{Location: yyDollar[1].expr.GetLocation()},
				Expression: yyDollar[1].expr,
			}
		}
	case 48:
		yyDollar = yyS[yypt-3 : yypt+1]
//line staticlang.y:360
		{
			yyVAL.stmt = &domain.BlockStmt{
				BaseNode:   domain.BaseNode{Location: getLocationFromToken(yyDollar[1].token)},
				Statements: yyDollar[2].stmts,
			}
		}
	case 49:
		yyDollar = yyS[yypt-2 : yypt+1]
//line staticlang.y:366
		{
			yyVAL.stmt = &domain.BlockStmt{
				BaseNode:   domain.BaseNode{Location: getLocationFromToken(yyDollar[1].token)},
				Statements: []domain.Statement{},
			}
		}
	case 50:
		yyDollar = yyS[yypt-1 : yypt+1]
//line staticlang.y:374
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 51:
		yyDollar = yyS[yypt-1 : yypt+1]
//line staticlang.y:377
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 52:
		yyDollar = yyS[yypt-3 : yypt+1]
//line staticlang.y:378
		{
			yyVAL.expr = &domain.BinaryExpr{
				BaseNode: domain.BaseNode{Location: yyDollar[1].expr.GetLocation()},
				Left:     yyDollar[1].expr,
				Operator: domain.Add,
				Right:    yyDollar[3].expr,
			}
		}
	case 53:
		yyDollar = yyS[yypt-3 : yypt+1]
//line staticlang.y:386
		{
			yyVAL.expr = &domain.BinaryExpr{
				BaseNode: domain.BaseNode{Location: yyDollar[1].expr.GetLocation()},
				Left:     yyDollar[1].expr,
				Operator: domain.Sub,
				Right:    yyDollar[3].expr,
			}
		}
	case 54:
		yyDollar = yyS[yypt-3 : yypt+1]
//line staticlang.y:394
		{
			yyVAL.expr = &domain.BinaryExpr{
				BaseNode: domain.BaseNode{Location: yyDollar[1].expr.GetLocation()},
				Left:     yyDollar[1].expr,
				Operator: domain.Mul,
				Right:    yyDollar[3].expr,
			}
		}
	case 55:
		yyDollar = yyS[yypt-3 : yypt+1]
//line staticlang.y:402
		{
			yyVAL.expr = &domain.BinaryExpr{
				BaseNode: domain.BaseNode{Location: yyDollar[1].expr.GetLocation()},
				Left:     yyDollar[1].expr,
				Operator: domain.Div,
				Right:    yyDollar[3].expr,
			}
		}
	case 56:
		yyDollar = yyS[yypt-3 : yypt+1]
//line staticlang.y:410
		{
			yyVAL.expr = &domain.BinaryExpr{
				BaseNode: domain.BaseNode{Location: yyDollar[1].expr.GetLocation()},
				Left:     yyDollar[1].expr,
				Operator: domain.Mod,
				Right:    yyDollar[3].expr,
			}
		}
	case 57:
		yyDollar = yyS[yypt-3 : yypt+1]
//line staticlang.y:418
		{
			yyVAL.expr = &domain.BinaryExpr{
				BaseNode: domain.BaseNode{Location: yyDollar[1].expr.GetLocation()},
				Left:     yyDollar[1].expr,
				Operator: domain.Eq,
				Right:    yyDollar[3].expr,
			}
		}
	case 58:
		yyDollar = yyS[yypt-3 : yypt+1]
//line staticlang.y:426
		{
			yyVAL.expr = &domain.BinaryExpr{
				BaseNode: domain.BaseNode{Location: yyDollar[1].expr.GetLocation()},
				Left:     yyDollar[1].expr,
				Operator: domain.Ne,
				Right:    yyDollar[3].expr,
			}
		}
	case 59:
		yyDollar = yyS[yypt-3 : yypt+1]
//line staticlang.y:434
		{
			yyVAL.expr = &domain.BinaryExpr{
				BaseNode: domain.BaseNode{Location: yyDollar[1].expr.GetLocation()},
				Left:     yyDollar[1].expr,
				Operator: domain.Lt,
				Right:    yyDollar[3].expr,
			}
		}
	case 60:
		yyDollar = yyS[yypt-3 : yypt+1]
//line staticlang.y:442
		{
			yyVAL.expr = &domain.BinaryExpr{
				BaseNode: domain.BaseNode{Location: yyDollar[1].expr.GetLocation()},
				Left:     yyDollar[1].expr,
				Operator: domain.Le,
				Right:    yyDollar[3].expr,
			}
		}
	case 61:
		yyDollar = yyS[yypt-3 : yypt+1]
//line staticlang.y:450
		{
			yyVAL.expr = &domain.BinaryExpr{
				BaseNode: domain.BaseNode{Location: yyDollar[1].expr.GetLocation()},
				Left:     yyDollar[1].expr,
				Operator: domain.Gt,
				Right:    yyDollar[3].expr,
			}
		}
	case 62:
		yyDollar = yyS[yypt-3 : yypt+1]
//line staticlang.y:458
		{
			yyVAL.expr = &domain.BinaryExpr{
				BaseNode: domain.BaseNode{Location: yyDollar[1].expr.GetLocation()},
				Left:     yyDollar[1].expr,
				Operator: domain.Ge,
				Right:    yyDollar[3].expr,
			}
		}
	case 63:
		yyDollar = yyS[yypt-3 : yypt+1]
//line staticlang.y:466
		{
			yyVAL.expr = &domain.BinaryExpr{
				BaseNode: domain.BaseNode{Location: yyDollar[1].expr.GetLocation()},
				Left:     yyDollar[1].expr,
				Operator: domain.And,
				Right:    yyDollar[3].expr,
			}
		}
	case 64:
		yyDollar = yyS[yypt-3 : yypt+1]
//line staticlang.y:474
		{
			yyVAL.expr = &domain.BinaryExpr{
				BaseNode: domain.BaseNode{Location: yyDollar[1].expr.GetLocation()},
				Left:     yyDollar[1].expr,
				Operator: domain.Or,
				Right:    yyDollar[3].expr,
			}
		}
	case 65:
		yyDollar = yyS[yypt-1 : yypt+1]
//line staticlang.y:484
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 66:
		yyDollar = yyS[yypt-2 : yypt+1]
//line staticlang.y:485
		{
			yyVAL.expr = &domain.UnaryExpr{
				BaseNode: domain.BaseNode{Location: getLocationFromToken(yyDollar[1].token)},
				Operator: domain.Neg,
				Operand:  yyDollar[2].expr,
			}
		}
	case 67:
		yyDollar = yyS[yypt-2 : yypt+1]
//line staticlang.y:492
		{
			yyVAL.expr = &domain.UnaryExpr{
				BaseNode: domain.BaseNode{Location: getLocationFromToken(yyDollar[1].token)},
				Operator: domain.Not,
				Operand:  yyDollar[2].expr,
			}
		}
	case 68:
		yyDollar = yyS[yypt-1 : yypt+1]
//line staticlang.y:501
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 69:
		yyDollar = yyS[yypt-4 : yypt+1]
//line staticlang.y:502
		{
			yyVAL.expr = &domain.CallExpr{
				BaseNode: domain.BaseNode{Location: yyDollar[1].expr.GetLocation()},
				Function: yyDollar[1].expr,
				Args:     yyDollar[3].exprs,
			}
		}
	case 70:
		yyDollar = yyS[yypt-3 : yypt+1]
//line staticlang.y:509
		{
			yyVAL.expr = &domain.CallExpr{
				BaseNode: domain.BaseNode{Location: yyDollar[1].expr.GetLocation()},
				Function: yyDollar[1].expr,
				Args:     []domain.Expression{},
			}
		}
	case 71:
		yyDollar = yyS[yypt-4 : yypt+1]
//line staticlang.y:516
		{
			yyVAL.expr = &domain.IndexExpr{
				BaseNode: domain.BaseNode{Location: yyDollar[1].expr.GetLocation()},
				Object:   yyDollar[1].expr,
				Index:    yyDollar[3].expr,
			}
		}
	case 72:
		yyDollar = yyS[yypt-3 : yypt+1]
//line staticlang.y:523
		{
			yyVAL.expr = &domain.MemberExpr{
				BaseNode: domain.BaseNode{Location: yyDollar[1].expr.GetLocation()},
				Object:   yyDollar[1].expr,
				Member:   yyDollar[3].str,
			}
		}
	case 73:
		yyDollar = yyS[yypt-1 : yypt+1]
//line staticlang.y:532
		{
			yyVAL.exprs = []domain.Expression{yyDollar[1].expr}
		}
	case 74:
		yyDollar = yyS[yypt-3 : yypt+1]
//line staticlang.y:535
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 75:
		yyDollar = yyS[yypt-1 : yypt+1]
//line staticlang.y:540
		{
			yyVAL.expr = &domain.IdentifierExpr{
				BaseNode: domain.BaseNode{Location: getLocationFromString(yyDollar[1].str)},
				Name:     yyDollar[1].str,
			}
		}
	case 76:
		yyDollar = yyS[yypt-1 : yypt+1]
//line staticlang.y:546
		{
			val, _ := strconv.ParseInt(yyDollar[1].token.Value, 10, 64)
			yyVAL.expr = &domain.LiteralExpr{
				BaseNode: domain.BaseNode{Location: getLocationFromToken(yyDollar[1].token)},
				Value:    val,
			}
		}
	case 77:
		yyDollar = yyS[yypt-1 : yypt+1]
//line staticlang.y:553
		{
			val, _ := strconv.ParseFloat(yyDollar[1].token.Value, 64)
			yyVAL.expr = &domain.LiteralExpr{
				BaseNode: domain.BaseNode{Location: getLocationFromToken(yyDollar[1].token)},
				Value:    val,
			}
		}
	case 78:
		yyDollar = yyS[yypt-1 : yypt+1]
//line staticlang.y:560
		{
			yyVAL.expr = &domain.LiteralExpr{
				BaseNode: domain.BaseNode{Location: getLocationFromToken(yyDollar[1].token)},
				Value:    yyDollar[1].token.Value,
			}
		}
	case 79:
		yyDollar = yyS[yypt-1 : yypt+1]
//line staticlang.y:566
		{
			yyVAL.expr = &domain.LiteralExpr{
				BaseNode: domain.BaseNode{Location: getLocationFromToken(yyDollar[1].token)},
				Value:    true,
			}
		}
	case 80:
		yyDollar = yyS[yypt-1 : yypt+1]
//line staticlang.y:572
		{
			yyVAL.expr = &domain.LiteralExpr{
				BaseNode: domain.BaseNode{Location: getLocationFromToken(yyDollar[1].token)},
				Value:    false,
			}
		}
	case 81:
		yyDollar = yyS[yypt-3 : yypt+1]
//line staticlang.y:578
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 82:
		yyDollar = yyS[yypt-1 : yypt+1]
//line staticlang.y:583
		{
			yyVAL.str = yyDollar[1].token.Value
		}
	}
	goto yystack /* stack new state and value */
}
