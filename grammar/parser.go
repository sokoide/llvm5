// Code generated by goyacc -o parser.go staticlang.y. DO NOT EDIT.

// Package grammar contains the Yacc parser for StaticLang
//
//line staticlang.y:2
package grammar

import __yyfmt__ "fmt"

//line staticlang.y:3

import (
	"fmt"
	"strconv"

	"github.com/sokoide/llvm5/internal/domain"
	"github.com/sokoide/llvm5/internal/interfaces"
)

//line staticlang.y:15
type yySymType struct {
	yys     int
	token   interfaces.Token
	program *domain.Program
	decl    domain.Declaration
	decls   []domain.Declaration
	stmt    domain.Statement
	stmts   []domain.Statement
	expr    domain.Expression
	exprs   []domain.Expression
	param   domain.Parameter
	params  []domain.Parameter
	field   domain.StructField
	fields  []domain.StructField
	typ     domain.Type
	str     string
	num     int64
	float   float64
	boolean bool
}

const INT = 57346
const FLOAT = 57347
const STRING = 57348
const BOOL = 57349
const IDENTIFIER = 57350
const FUNC = 57351
const STRUCT = 57352
const VAR = 57353
const IF = 57354
const ELSE = 57355
const WHILE = 57356
const FOR = 57357
const RETURN = 57358
const TRUE = 57359
const FALSE = 57360
const PLUS = 57361
const MINUS = 57362
const STAR = 57363
const SLASH = 57364
const PERCENT = 57365
const EQUAL = 57366
const NOT_EQUAL = 57367
const LESS = 57368
const LESS_EQUAL = 57369
const GREATER = 57370
const GREATER_EQUAL = 57371
const AND = 57372
const OR = 57373
const NOT = 57374
const ASSIGN = 57375
const LEFT_PAREN = 57376
const RIGHT_PAREN = 57377
const LEFT_BRACE = 57378
const RIGHT_BRACE = 57379
const LEFT_BRACKET = 57380
const RIGHT_BRACKET = 57381
const SEMICOLON = 57382
const COMMA = 57383
const DOT = 57384
const COLON = 57385
const EOF = 57386
const UNARY_MINUS = 57387

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"INT",
	"FLOAT",
	"STRING",
	"BOOL",
	"IDENTIFIER",
	"FUNC",
	"STRUCT",
	"VAR",
	"IF",
	"ELSE",
	"WHILE",
	"FOR",
	"RETURN",
	"TRUE",
	"FALSE",
	"PLUS",
	"MINUS",
	"STAR",
	"SLASH",
	"PERCENT",
	"EQUAL",
	"NOT_EQUAL",
	"LESS",
	"LESS_EQUAL",
	"GREATER",
	"GREATER_EQUAL",
	"AND",
	"OR",
	"NOT",
	"ASSIGN",
	"LEFT_PAREN",
	"RIGHT_PAREN",
	"LEFT_BRACE",
	"RIGHT_BRACE",
	"LEFT_BRACKET",
	"RIGHT_BRACKET",
	"SEMICOLON",
	"COMMA",
	"DOT",
	"COLON",
	"EOF",
	"UNARY_MINUS",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line staticlang.y:531

// Helper functions
func getLocationFromToken(token interfaces.Token) domain.SourceRange {
	pos := token.Location
	return domain.SourceRange{
		Start: pos,
		End:   pos,
	}
}

func getLocationFromString(str string) domain.SourceRange {
	// This is a placeholder - in a real implementation, we'd track positions
	return domain.SourceRange{
		Start: domain.SourcePosition{},
		End:   domain.SourcePosition{},
	}
}

func getLocation(decls []domain.Declaration) domain.SourceRange {
	if len(decls) == 0 {
		return domain.SourceRange{}
	}
	start := decls[0].GetLocation()
	end := decls[len(decls)-1].GetLocation()
	return domain.SourceRange{
		Start: start.Start,
		End:   end.End,
	}
}

//line yacctab:1
var yyExca = [...]int8{
	-1, 1,
	1, -1,
	-2, 0,
}

const yyPrivate = 57344

const yyLast = 322

var yyAct = [...]uint8{
	41, 62, 94, 143, 24, 57, 95, 51, 9, 11,
	96, 141, 134, 140, 17, 21, 129, 25, 135, 25,
	21, 128, 27, 25, 25, 17, 30, 31, 127, 22,
	63, 64, 65, 56, 10, 23, 107, 37, 25, 136,
	71, 70, 74, 66, 67, 35, 59, 10, 34, 75,
	69, 13, 73, 149, 10, 148, 131, 130, 60, 126,
	68, 122, 78, 80, 77, 97, 98, 76, 12, 144,
	10, 25, 10, 10, 100, 25, 99, 26, 101, 105,
	36, 18, 102, 28, 103, 104, 81, 82, 83, 84,
	85, 86, 87, 88, 89, 90, 91, 92, 125, 19,
	15, 14, 123, 124, 16, 49, 81, 82, 83, 84,
	85, 6, 7, 132, 133, 108, 109, 110, 111, 112,
	113, 114, 115, 116, 117, 118, 119, 120, 32, 20,
	33, 138, 139, 83, 84, 85, 137, 38, 121, 58,
	61, 145, 146, 142, 3, 147, 39, 8, 29, 150,
	151, 63, 64, 65, 48, 10, 47, 46, 50, 52,
	45, 53, 54, 55, 66, 67, 44, 59, 81, 82,
	83, 84, 85, 86, 87, 88, 89, 90, 91, 60,
	43, 68, 42, 34, 63, 64, 65, 106, 10, 2,
	5, 50, 52, 4, 53, 54, 55, 66, 67, 1,
	59, 81, 82, 83, 84, 85, 0, 0, 88, 89,
	90, 91, 60, 0, 68, 0, 34, 72, 63, 64,
	65, 0, 10, 0, 0, 50, 52, 0, 53, 54,
	55, 66, 67, 0, 59, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 60, 0, 68, 0,
	34, 40, 63, 64, 65, 0, 10, 0, 0, 50,
	52, 0, 53, 54, 55, 66, 67, 0, 59, 0,
	0, 0, 63, 64, 65, 0, 10, 63, 64, 65,
	60, 10, 68, 0, 34, 66, 67, 0, 59, 0,
	66, 67, 0, 59, 0, 0, 0, 0, 0, 0,
	60, 0, 68, 0, 0, 60, 0, 68, 79, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93,
}

var yyPact = [...]int16{
	102, -1000, 102, -1000, -1000, -1000, 64, 64, -1000, 34,
	-1000, 15, 65, 62, -6, 39, -1000, 39, 46, -1000,
	-1000, 39, 39, 64, 12, -1000, 41, -1000, -1000, -1000,
	-3, 12, -1000, -1000, 214, 11, 39, -1000, -1000, 180,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	64, 9, 33, 30, 28, 268, 290, -1000, -32, 273,
	273, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 273, 39,
	-1000, -1000, -1000, 39, 273, -1000, 273, 273, 147, -1000,
	-4, 273, 273, 273, 273, 273, 273, 273, 273, 273,
	273, 273, 273, 273, 26, 273, 64, -1000, -1000, 24,
	-1000, -12, -24, 22, 21, 273, 273, -1000, 112, 112,
	-1000, -1000, -1000, 182, 182, 87, 87, 87, 87, 149,
	67, -23, -1000, -1000, 0, -1000, -1000, -1000, 273, -1000,
	248, 248, -27, -29, -1000, 273, -1000, -37, 56, -1000,
	248, 248, -1000, -1000, 248, 20, 18, -1000, 248, 248,
	-1000, -1000,
}

var yyPgo = [...]uint8{
	0, 199, 144, 193, 190, 189, 0, 182, 180, 166,
	160, 157, 156, 154, 105, 146, 7, 140, 139, 5,
	33, 138, 104, 101, 129, 81, 4, 1,
}

var yyR1 = [...]int8{
	0, 1, 1, 5, 5, 2, 2, 3, 3, 4,
	4, 23, 23, 22, 25, 25, 24, 26, 26, 26,
	15, 15, 6, 6, 6, 6, 6, 6, 6, 6,
	7, 7, 8, 9, 9, 10, 11, 11, 12, 12,
	13, 14, 14, 16, 20, 20, 20, 20, 20, 20,
	20, 20, 20, 20, 20, 20, 20, 20, 19, 19,
	19, 18, 18, 18, 18, 18, 21, 21, 17, 17,
	17, 17, 17, 17, 17, 27,
}

var yyR2 = [...]int8{
	0, 1, 0, 1, 2, 1, 1, 7, 6, 5,
	4, 1, 3, 2, 1, 2, 3, 1, 4, 3,
	1, 2, 1, 1, 1, 1, 1, 1, 1, 1,
	4, 6, 4, 5, 7, 5, 8, 8, 2, 3,
	2, 3, 2, 1, 1, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 1, 2,
	2, 1, 4, 3, 4, 3, 1, 3, 1, 1,
	1, 1, 1, 1, 3, 1,
}

var yyChk = [...]int16{
	-1000, -1, -5, -2, -3, -4, 9, 10, -2, -27,
	8, -27, 34, 36, -23, 35, -22, -27, -25, 37,
	-24, -27, 35, 41, -26, -27, 38, -26, 37, -24,
	-26, -26, -22, -14, 36, 4, 39, 40, -14, -15,
	37, -6, -7, -8, -9, -10, -11, -12, -13, -14,
	11, -16, 12, 14, 15, 16, -20, -19, -18, 20,
	32, -17, -27, 4, 5, 6, 17, 18, 34, 39,
	-26, -6, 37, -27, 33, 40, 34, 34, 34, 40,
	-16, 19, 20, 21, 22, 23, 24, 25, 26, 27,
	28, 29, 30, 31, 34, 38, 42, -19, -19, -16,
	-26, -26, -16, -16, -16, -6, 40, 40, -20, -20,
	-20, -20, -20, -20, -20, -20, -20, -20, -20, -20,
	-20, -21, 35, -16, -16, -27, 35, 40, 33, 40,
	35, 35, -16, -16, 35, 41, 39, -16, -6, -6,
	40, 40, -16, 40, 13, -6, -6, -6, 35, 35,
	-6, -6,
}

var yyDef = [...]int8{
	2, -2, 1, 3, 5, 6, 0, 0, 4, 0,
	75, 0, 0, 0, 0, 0, 11, 0, 0, 10,
	14, 0, 0, 0, 0, 17, 0, 13, 9, 15,
	0, 0, 12, 8, 0, 0, 0, 16, 7, 0,
	42, 20, 22, 23, 24, 25, 26, 27, 28, 29,
	0, 0, 0, 0, 0, 0, 43, 44, 58, 0,
	0, 61, 68, 69, 70, 71, 72, 73, 0, 0,
	19, 21, 41, 0, 0, 40, 0, 0, 0, 38,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 59, 60, 0,
	18, 0, 0, 0, 0, 0, 0, 39, 45, 46,
	47, 48, 49, 50, 51, 52, 53, 54, 55, 56,
	57, 0, 63, 66, 0, 65, 74, 30, 0, 32,
	0, 0, 0, 0, 62, 0, 64, 0, 33, 35,
	0, 0, 67, 31, 0, 0, 0, 34, 0, 0,
	36, 37,
}

var yyTok1 = [...]int8{
	1,
}

var yyTok2 = [...]int8{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45,
}

var yyTok3 = [...]int8{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := int(yyPact[state])
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && int(yyChk[int(yyAct[n])]) == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || int(yyExca[i+1]) != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := int(yyExca[i])
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = int(yyTok1[0])
		goto out
	}
	if char < len(yyTok1) {
		token = int(yyTok1[char])
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = int(yyTok2[char-yyPrivate])
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = int(yyTok3[i+0])
		if token == char {
			token = int(yyTok3[i+1])
			goto out
		}
	}

out:
	if token == 0 {
		token = int(yyTok2[1]) /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = int(yyPact[yystate])
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = int(yyAct[yyn])
	if int(yyChk[yyn]) == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = int(yyDef[yystate])
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && int(yyExca[xi+1]) == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = int(yyExca[xi+0])
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = int(yyExca[xi+1])
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = int(yyPact[yyS[yyp].yys]) + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = int(yyAct[yyn]) /* simulate a shift of "error" */
					if int(yyChk[yystate]) == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= int(yyR2[yyn])
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = int(yyR1[yyn])
	yyg := int(yyPgo[yyn])
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = int(yyAct[yyg])
	} else {
		yystate = int(yyAct[yyj])
		if int(yyChk[yystate]) != -yyn {
			yystate = int(yyAct[yyg])
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-1 : yypt+1]
//line staticlang.y:73
		{
			yyVAL.program = &domain.Program{
				BaseNode:     domain.BaseNode{Location: getLocation(yyDollar[1].decls)},
				Declarations: yyDollar[1].decls,
			}
			yylex.(*Parser).result = yyVAL.program
		}
	case 2:
		yyDollar = yyS[yypt-0 : yypt+1]
//line staticlang.y:80
		{
			yyVAL.program = &domain.Program{
				BaseNode:     domain.BaseNode{},
				Declarations: []domain.Declaration{},
			}
			yylex.(*Parser).result = yyVAL.program
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
//line staticlang.y:89
		{
			yyVAL.decls = []domain.Declaration{yyDollar[1].decl}
		}
	case 4:
		yyDollar = yyS[yypt-2 : yypt+1]
//line staticlang.y:92
		{
			yyVAL.decls = append(yyDollar[1].decls, yyDollar[2].decl)
		}
	case 5:
		yyDollar = yyS[yypt-1 : yypt+1]
//line staticlang.y:97
		{
			yyVAL.decl = yyDollar[1].decl
		}
	case 6:
		yyDollar = yyS[yypt-1 : yypt+1]
//line staticlang.y:98
		{
			yyVAL.decl = yyDollar[1].decl
		}
	case 7:
		yyDollar = yyS[yypt-7 : yypt+1]
//line staticlang.y:101
		{
			yyVAL.decl = &domain.FunctionDecl{
				BaseNode:   domain.BaseNode{Location: getLocationFromToken(yyDollar[1].token)},
				Name:       yyDollar[2].str,
				Parameters: yyDollar[4].params,
				ReturnType: yyDollar[6].typ,
				Body:       yyDollar[7].stmt.(*domain.BlockStmt),
			}
		}
	case 8:
		yyDollar = yyS[yypt-6 : yypt+1]
//line staticlang.y:110
		{
			yyVAL.decl = &domain.FunctionDecl{
				BaseNode:   domain.BaseNode{Location: getLocationFromToken(yyDollar[1].token)},
				Name:       yyDollar[2].str,
				Parameters: []domain.Parameter{},
				ReturnType: yyDollar[5].typ,
				Body:       yyDollar[6].stmt.(*domain.BlockStmt),
			}
		}
	case 9:
		yyDollar = yyS[yypt-5 : yypt+1]
//line staticlang.y:121
		{
			yyVAL.decl = &domain.StructDecl{
				BaseNode: domain.BaseNode{Location: getLocationFromToken(yyDollar[1].token)},
				Name:     yyDollar[2].str,
				Fields:   yyDollar[4].fields,
			}
		}
	case 10:
		yyDollar = yyS[yypt-4 : yypt+1]
//line staticlang.y:128
		{
			yyVAL.decl = &domain.StructDecl{
				BaseNode: domain.BaseNode{Location: getLocationFromToken(yyDollar[1].token)},
				Name:     yyDollar[2].str,
				Fields:   []domain.StructField{},
			}
		}
	case 11:
		yyDollar = yyS[yypt-1 : yypt+1]
//line staticlang.y:137
		{
			yyVAL.params = []domain.Parameter{yyDollar[1].param}
		}
	case 12:
		yyDollar = yyS[yypt-3 : yypt+1]
//line staticlang.y:140
		{
			yyVAL.params = append(yyDollar[1].params, yyDollar[3].param)
		}
	case 13:
		yyDollar = yyS[yypt-2 : yypt+1]
//line staticlang.y:145
		{
			yyVAL.param = domain.Parameter{
				Name: yyDollar[1].str,
				Type: yyDollar[2].typ,
			}
		}
	case 14:
		yyDollar = yyS[yypt-1 : yypt+1]
//line staticlang.y:153
		{
			yyVAL.fields = []domain.StructField{yyDollar[1].field}
		}
	case 15:
		yyDollar = yyS[yypt-2 : yypt+1]
//line staticlang.y:156
		{
			yyVAL.fields = append(yyDollar[1].fields, yyDollar[2].field)
		}
	case 16:
		yyDollar = yyS[yypt-3 : yypt+1]
//line staticlang.y:161
		{
			yyVAL.field = domain.StructField{
				Name: yyDollar[1].str,
				Type: yyDollar[2].typ,
			}
		}
	case 17:
		yyDollar = yyS[yypt-1 : yypt+1]
//line staticlang.y:169
		{
			reg := yylex.(*Parser).typeRegistry
			if t, exists := reg.GetType(yyDollar[1].str); exists {
				yyVAL.typ = t
			} else {
				yyVAL.typ = &domain.TypeError{Message: fmt.Sprintf("unknown type: %s", yyDollar[1].str)}
			}
		}
	case 18:
		yyDollar = yyS[yypt-4 : yypt+1]
//line staticlang.y:177
		{
			size, _ := strconv.ParseInt(yyDollar[2].token.Value, 10, 32)
			yyVAL.typ = &domain.ArrayType{
				ElementType: yyDollar[4].typ,
				Size:        int(size),
			}
		}
	case 19:
		yyDollar = yyS[yypt-3 : yypt+1]
//line staticlang.y:184
		{
			yyVAL.typ = &domain.ArrayType{
				ElementType: yyDollar[3].typ,
				Size:        -1, // dynamic array
			}
		}
	case 20:
		yyDollar = yyS[yypt-1 : yypt+1]
//line staticlang.y:192
		{
			yyVAL.stmts = []domain.Statement{yyDollar[1].stmt}
		}
	case 21:
		yyDollar = yyS[yypt-2 : yypt+1]
//line staticlang.y:195
		{
			yyVAL.stmts = append(yyDollar[1].stmts, yyDollar[2].stmt)
		}
	case 22:
		yyDollar = yyS[yypt-1 : yypt+1]
//line staticlang.y:200
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 23:
		yyDollar = yyS[yypt-1 : yypt+1]
//line staticlang.y:201
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 24:
		yyDollar = yyS[yypt-1 : yypt+1]
//line staticlang.y:202
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 25:
		yyDollar = yyS[yypt-1 : yypt+1]
//line staticlang.y:203
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 26:
		yyDollar = yyS[yypt-1 : yypt+1]
//line staticlang.y:204
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 27:
		yyDollar = yyS[yypt-1 : yypt+1]
//line staticlang.y:205
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 28:
		yyDollar = yyS[yypt-1 : yypt+1]
//line staticlang.y:206
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 29:
		yyDollar = yyS[yypt-1 : yypt+1]
//line staticlang.y:207
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 30:
		yyDollar = yyS[yypt-4 : yypt+1]
//line staticlang.y:210
		{
			yyVAL.stmt = &domain.VarDeclStmt{
				BaseNode:    domain.BaseNode{Location: getLocationFromToken(yyDollar[1].token)},
				Name:        yyDollar[2].str,
				Type_:       yyDollar[3].typ,
				Initializer: nil,
			}
		}
	case 31:
		yyDollar = yyS[yypt-6 : yypt+1]
//line staticlang.y:218
		{
			yyVAL.stmt = &domain.VarDeclStmt{
				BaseNode:    domain.BaseNode{Location: getLocationFromToken(yyDollar[1].token)},
				Name:        yyDollar[2].str,
				Type_:       yyDollar[3].typ,
				Initializer: yyDollar[5].expr,
			}
		}
	case 32:
		yyDollar = yyS[yypt-4 : yypt+1]
//line staticlang.y:228
		{
			yyVAL.stmt = &domain.AssignStmt{
				BaseNode: domain.BaseNode{Location: yyDollar[1].expr.GetLocation()},
				Target:   yyDollar[1].expr,
				Value:    yyDollar[3].expr,
			}
		}
	case 33:
		yyDollar = yyS[yypt-5 : yypt+1]
//line staticlang.y:237
		{
			yyVAL.stmt = &domain.IfStmt{
				BaseNode:  domain.BaseNode{Location: getLocationFromToken(yyDollar[1].token)},
				Condition: yyDollar[3].expr,
				ThenStmt:  yyDollar[5].stmt,
				ElseStmt:  nil,
			}
		}
	case 34:
		yyDollar = yyS[yypt-7 : yypt+1]
//line staticlang.y:245
		{
			yyVAL.stmt = &domain.IfStmt{
				BaseNode:  domain.BaseNode{Location: getLocationFromToken(yyDollar[1].token)},
				Condition: yyDollar[3].expr,
				ThenStmt:  yyDollar[5].stmt,
				ElseStmt:  yyDollar[7].stmt,
			}
		}
	case 35:
		yyDollar = yyS[yypt-5 : yypt+1]
//line staticlang.y:255
		{
			yyVAL.stmt = &domain.WhileStmt{
				BaseNode:  domain.BaseNode{Location: getLocationFromToken(yyDollar[1].token)},
				Condition: yyDollar[3].expr,
				Body:      yyDollar[5].stmt,
			}
		}
	case 36:
		yyDollar = yyS[yypt-8 : yypt+1]
//line staticlang.y:264
		{
			yyVAL.stmt = &domain.ForStmt{
				BaseNode:  domain.BaseNode{Location: getLocationFromToken(yyDollar[1].token)},
				Init:      yyDollar[3].stmt,
				Condition: yyDollar[4].expr,
				Update:    yyDollar[6].stmt,
				Body:      yyDollar[8].stmt,
			}
		}
	case 37:
		yyDollar = yyS[yypt-8 : yypt+1]
//line staticlang.y:273
		{
			yyVAL.stmt = &domain.ForStmt{
				BaseNode:  domain.BaseNode{Location: getLocationFromToken(yyDollar[1].token)},
				Init:      nil,
				Condition: yyDollar[4].expr,
				Update:    yyDollar[6].stmt,
				Body:      yyDollar[8].stmt,
			}
		}
	case 38:
		yyDollar = yyS[yypt-2 : yypt+1]
//line staticlang.y:284
		{
			yyVAL.stmt = &domain.ReturnStmt{
				BaseNode: domain.BaseNode{Location: getLocationFromToken(yyDollar[1].token)},
				Value:    nil,
			}
		}
	case 39:
		yyDollar = yyS[yypt-3 : yypt+1]
//line staticlang.y:290
		{
			yyVAL.stmt = &domain.ReturnStmt{
				BaseNode: domain.BaseNode{Location: getLocationFromToken(yyDollar[1].token)},
				Value:    yyDollar[2].expr,
			}
		}
	case 40:
		yyDollar = yyS[yypt-2 : yypt+1]
//line staticlang.y:298
		{
			yyVAL.stmt = &domain.ExprStmt{
				BaseNode:   domain.BaseNode{Location: yyDollar[1].expr.GetLocation()},
				Expression: yyDollar[1].expr,
			}
		}
	case 41:
		yyDollar = yyS[yypt-3 : yypt+1]
//line staticlang.y:306
		{
			yyVAL.stmt = &domain.BlockStmt{
				BaseNode:   domain.BaseNode{Location: getLocationFromToken(yyDollar[1].token)},
				Statements: yyDollar[2].stmts,
			}
		}
	case 42:
		yyDollar = yyS[yypt-2 : yypt+1]
//line staticlang.y:312
		{
			yyVAL.stmt = &domain.BlockStmt{
				BaseNode:   domain.BaseNode{Location: getLocationFromToken(yyDollar[1].token)},
				Statements: []domain.Statement{},
			}
		}
	case 43:
		yyDollar = yyS[yypt-1 : yypt+1]
//line staticlang.y:320
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 44:
		yyDollar = yyS[yypt-1 : yypt+1]
//line staticlang.y:323
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 45:
		yyDollar = yyS[yypt-3 : yypt+1]
//line staticlang.y:324
		{
			yyVAL.expr = &domain.BinaryExpr{
				BaseNode: domain.BaseNode{Location: yyDollar[1].expr.GetLocation()},
				Left:     yyDollar[1].expr,
				Operator: domain.Add,
				Right:    yyDollar[3].expr,
			}
		}
	case 46:
		yyDollar = yyS[yypt-3 : yypt+1]
//line staticlang.y:332
		{
			yyVAL.expr = &domain.BinaryExpr{
				BaseNode: domain.BaseNode{Location: yyDollar[1].expr.GetLocation()},
				Left:     yyDollar[1].expr,
				Operator: domain.Sub,
				Right:    yyDollar[3].expr,
			}
		}
	case 47:
		yyDollar = yyS[yypt-3 : yypt+1]
//line staticlang.y:340
		{
			yyVAL.expr = &domain.BinaryExpr{
				BaseNode: domain.BaseNode{Location: yyDollar[1].expr.GetLocation()},
				Left:     yyDollar[1].expr,
				Operator: domain.Mul,
				Right:    yyDollar[3].expr,
			}
		}
	case 48:
		yyDollar = yyS[yypt-3 : yypt+1]
//line staticlang.y:348
		{
			yyVAL.expr = &domain.BinaryExpr{
				BaseNode: domain.BaseNode{Location: yyDollar[1].expr.GetLocation()},
				Left:     yyDollar[1].expr,
				Operator: domain.Div,
				Right:    yyDollar[3].expr,
			}
		}
	case 49:
		yyDollar = yyS[yypt-3 : yypt+1]
//line staticlang.y:356
		{
			yyVAL.expr = &domain.BinaryExpr{
				BaseNode: domain.BaseNode{Location: yyDollar[1].expr.GetLocation()},
				Left:     yyDollar[1].expr,
				Operator: domain.Mod,
				Right:    yyDollar[3].expr,
			}
		}
	case 50:
		yyDollar = yyS[yypt-3 : yypt+1]
//line staticlang.y:364
		{
			yyVAL.expr = &domain.BinaryExpr{
				BaseNode: domain.BaseNode{Location: yyDollar[1].expr.GetLocation()},
				Left:     yyDollar[1].expr,
				Operator: domain.Eq,
				Right:    yyDollar[3].expr,
			}
		}
	case 51:
		yyDollar = yyS[yypt-3 : yypt+1]
//line staticlang.y:372
		{
			yyVAL.expr = &domain.BinaryExpr{
				BaseNode: domain.BaseNode{Location: yyDollar[1].expr.GetLocation()},
				Left:     yyDollar[1].expr,
				Operator: domain.Ne,
				Right:    yyDollar[3].expr,
			}
		}
	case 52:
		yyDollar = yyS[yypt-3 : yypt+1]
//line staticlang.y:380
		{
			yyVAL.expr = &domain.BinaryExpr{
				BaseNode: domain.BaseNode{Location: yyDollar[1].expr.GetLocation()},
				Left:     yyDollar[1].expr,
				Operator: domain.Lt,
				Right:    yyDollar[3].expr,
			}
		}
	case 53:
		yyDollar = yyS[yypt-3 : yypt+1]
//line staticlang.y:388
		{
			yyVAL.expr = &domain.BinaryExpr{
				BaseNode: domain.BaseNode{Location: yyDollar[1].expr.GetLocation()},
				Left:     yyDollar[1].expr,
				Operator: domain.Le,
				Right:    yyDollar[3].expr,
			}
		}
	case 54:
		yyDollar = yyS[yypt-3 : yypt+1]
//line staticlang.y:396
		{
			yyVAL.expr = &domain.BinaryExpr{
				BaseNode: domain.BaseNode{Location: yyDollar[1].expr.GetLocation()},
				Left:     yyDollar[1].expr,
				Operator: domain.Gt,
				Right:    yyDollar[3].expr,
			}
		}
	case 55:
		yyDollar = yyS[yypt-3 : yypt+1]
//line staticlang.y:404
		{
			yyVAL.expr = &domain.BinaryExpr{
				BaseNode: domain.BaseNode{Location: yyDollar[1].expr.GetLocation()},
				Left:     yyDollar[1].expr,
				Operator: domain.Ge,
				Right:    yyDollar[3].expr,
			}
		}
	case 56:
		yyDollar = yyS[yypt-3 : yypt+1]
//line staticlang.y:412
		{
			yyVAL.expr = &domain.BinaryExpr{
				BaseNode: domain.BaseNode{Location: yyDollar[1].expr.GetLocation()},
				Left:     yyDollar[1].expr,
				Operator: domain.And,
				Right:    yyDollar[3].expr,
			}
		}
	case 57:
		yyDollar = yyS[yypt-3 : yypt+1]
//line staticlang.y:420
		{
			yyVAL.expr = &domain.BinaryExpr{
				BaseNode: domain.BaseNode{Location: yyDollar[1].expr.GetLocation()},
				Left:     yyDollar[1].expr,
				Operator: domain.Or,
				Right:    yyDollar[3].expr,
			}
		}
	case 58:
		yyDollar = yyS[yypt-1 : yypt+1]
//line staticlang.y:430
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 59:
		yyDollar = yyS[yypt-2 : yypt+1]
//line staticlang.y:431
		{
			yyVAL.expr = &domain.UnaryExpr{
				BaseNode: domain.BaseNode{Location: getLocationFromToken(yyDollar[1].token)},
				Operator: domain.Neg,
				Operand:  yyDollar[2].expr,
			}
		}
	case 60:
		yyDollar = yyS[yypt-2 : yypt+1]
//line staticlang.y:438
		{
			yyVAL.expr = &domain.UnaryExpr{
				BaseNode: domain.BaseNode{Location: getLocationFromToken(yyDollar[1].token)},
				Operator: domain.Not,
				Operand:  yyDollar[2].expr,
			}
		}
	case 61:
		yyDollar = yyS[yypt-1 : yypt+1]
//line staticlang.y:447
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 62:
		yyDollar = yyS[yypt-4 : yypt+1]
//line staticlang.y:448
		{
			yyVAL.expr = &domain.CallExpr{
				BaseNode: domain.BaseNode{Location: yyDollar[1].expr.GetLocation()},
				Function: yyDollar[1].expr,
				Args:     yyDollar[3].exprs,
			}
		}
	case 63:
		yyDollar = yyS[yypt-3 : yypt+1]
//line staticlang.y:455
		{
			yyVAL.expr = &domain.CallExpr{
				BaseNode: domain.BaseNode{Location: yyDollar[1].expr.GetLocation()},
				Function: yyDollar[1].expr,
				Args:     []domain.Expression{},
			}
		}
	case 64:
		yyDollar = yyS[yypt-4 : yypt+1]
//line staticlang.y:462
		{
			yyVAL.expr = &domain.IndexExpr{
				BaseNode: domain.BaseNode{Location: yyDollar[1].expr.GetLocation()},
				Object:   yyDollar[1].expr,
				Index:    yyDollar[3].expr,
			}
		}
	case 65:
		yyDollar = yyS[yypt-3 : yypt+1]
//line staticlang.y:469
		{
			yyVAL.expr = &domain.MemberExpr{
				BaseNode: domain.BaseNode{Location: yyDollar[1].expr.GetLocation()},
				Object:   yyDollar[1].expr,
				Member:   yyDollar[3].str,
			}
		}
	case 66:
		yyDollar = yyS[yypt-1 : yypt+1]
//line staticlang.y:478
		{
			yyVAL.exprs = []domain.Expression{yyDollar[1].expr}
		}
	case 67:
		yyDollar = yyS[yypt-3 : yypt+1]
//line staticlang.y:481
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 68:
		yyDollar = yyS[yypt-1 : yypt+1]
//line staticlang.y:486
		{
			yyVAL.expr = &domain.IdentifierExpr{
				BaseNode: domain.BaseNode{Location: getLocationFromString(yyDollar[1].str)},
				Name:     yyDollar[1].str,
			}
		}
	case 69:
		yyDollar = yyS[yypt-1 : yypt+1]
//line staticlang.y:492
		{
			val, _ := strconv.ParseInt(yyDollar[1].token.Value, 10, 64)
			yyVAL.expr = &domain.LiteralExpr{
				BaseNode: domain.BaseNode{Location: getLocationFromToken(yyDollar[1].token)},
				Value:    val,
			}
		}
	case 70:
		yyDollar = yyS[yypt-1 : yypt+1]
//line staticlang.y:499
		{
			val, _ := strconv.ParseFloat(yyDollar[1].token.Value, 64)
			yyVAL.expr = &domain.LiteralExpr{
				BaseNode: domain.BaseNode{Location: getLocationFromToken(yyDollar[1].token)},
				Value:    val,
			}
		}
	case 71:
		yyDollar = yyS[yypt-1 : yypt+1]
//line staticlang.y:506
		{
			yyVAL.expr = &domain.LiteralExpr{
				BaseNode: domain.BaseNode{Location: getLocationFromToken(yyDollar[1].token)},
				Value:    yyDollar[1].token.Value,
			}
		}
	case 72:
		yyDollar = yyS[yypt-1 : yypt+1]
//line staticlang.y:512
		{
			yyVAL.expr = &domain.LiteralExpr{
				BaseNode: domain.BaseNode{Location: getLocationFromToken(yyDollar[1].token)},
				Value:    true,
			}
		}
	case 73:
		yyDollar = yyS[yypt-1 : yypt+1]
//line staticlang.y:518
		{
			yyVAL.expr = &domain.LiteralExpr{
				BaseNode: domain.BaseNode{Location: getLocationFromToken(yyDollar[1].token)},
				Value:    false,
			}
		}
	case 74:
		yyDollar = yyS[yypt-3 : yypt+1]
//line staticlang.y:524
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 75:
		yyDollar = yyS[yypt-1 : yypt+1]
//line staticlang.y:529
		{
			yyVAL.str = yyDollar[1].token.Value
		}
	}
	goto yystack /* stack new state and value */
}
